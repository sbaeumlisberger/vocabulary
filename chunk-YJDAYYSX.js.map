{
  "version": 3,
  "sources": ["src/app/events/vocabulary-added.event.ts", "src/app/events/vocabulary-imported.event.ts", "src/app/events/vocabulary-updated.event.ts", "src/app/services/vocabulary.service.ts"],
  "sourcesContent": ["import { IVocable } from '../models/vocable.model';\n\nexport class VocabularyAddedEvent {\n  public static readonly ID = 'vocabulary:added';\n\n  constructor(public vocable: IVocable) {}\n}\n", "export class VocabularyImportedEvent {\n  public static readonly ID = 'vocabulary:imported';\n}\n", "import { IVocable } from '../models/vocable.model';\n\nexport class VocabularyUpdatedEvent {\n  public static readonly ID = 'vocabulary:updated';\n\n  constructor(public vocable: IVocable) {}\n}\n", "import { Injectable } from '@angular/core';\nimport { NgEventBus } from 'ng-event-bus';\nimport { VocabularyAddedEvent } from '../events/vocabulary-added.event';\nimport { VocabularyImportedEvent } from '../events/vocabulary-imported.event';\nimport { VocabularyUpdatedEvent } from '../events/vocabulary-updated.event';\nimport { PracticeLevel } from '../models/practice-level.model';\nimport { IVocable } from '../models/vocable.model';\nimport { VocabularyDB } from '../persistence/vocabulary-db';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VocabularyService {\n  constructor(\n    private db: VocabularyDB,\n    private eventBus: NgEventBus,\n  ) {}\n\n  async getAll() {\n    return await this.db.vocabulary.toArray();\n  }\n\n  async count(): Promise<number> {\n    return await this.db.vocabulary.count();\n  }\n\n  async load(offset: number, limit: number): Promise<IVocable[]> {\n    return await this.db.vocabulary.reverse().offset(offset).limit(limit).toArray();\n  }\n\n  async loadForPracticeLevel(practiceLevel: PracticeLevel, offset: number, limit: number): Promise<IVocable[]> {\n    return await this.db.vocabulary\n      .reverse()\n      .filter((v) => v.practiceLevel == practiceLevel)\n      .offset(offset)\n      .limit(limit)\n      .toArray();\n  }\n\n  async search(query: string, limit: number = 10): Promise<IVocable[]> {\n    query = query.toLowerCase();\n    return await this.db.vocabulary\n      .filter(\n        (v) =>\n          v.foreignMeaning.toLowerCase().includes(query) ||\n          !!v.nativeMeanings.find((nm) => nm.toLowerCase().includes(query)),\n      )\n      .limit(limit)\n      .toArray();\n  }\n\n  async add(vocable: IVocable): Promise<void> {\n    await this.db.vocabulary.add(vocable);\n    this.eventBus.cast(VocabularyAddedEvent.ID, new VocabularyAddedEvent(vocable));\n  }\n\n  async update(vocable: IVocable): Promise<void> {\n    if (vocable.id === undefined) {\n      throw 'vocable does not exist in database';\n    }\n    await this.db.vocabulary.put(vocable);\n    this.eventBus.cast(VocabularyUpdatedEvent.ID, new VocabularyUpdatedEvent(vocable));\n  }\n\n  async delete(vocable: IVocable): Promise<void> {\n    if (vocable.id === undefined) {\n      throw 'vocable does not exist in database';\n    }\n    await this.db.vocabulary.delete(vocable.id);\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.db.vocabulary.clear();\n  }\n\n  async import(vocabulary: IVocable[]): Promise<void> {\n    await this.db.vocabulary.bulkPut(vocabulary);\n    this.eventBus.cast(VocabularyImportedEvent.ID, new VocabularyImportedEvent());\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAEM,IAAO,uBAAP,MAA2B;;AACR,SAAA,KAAK;EAAmB;EAE/C,YAAmB,SAAiB;AAAjB,SAAA,UAAA;EAAoB;;;;ACLnC,IAAO,0BAAP,MAA8B;;AACX,SAAA,KAAK;EAAsB;;;;ACC9C,IAAO,yBAAP,MAA6B;;AACV,SAAA,KAAK;EAAqB;EAEjD,YAAmB,SAAiB;AAAjB,SAAA,UAAA;EAAoB;;;;ACOnC,IAAO,oBAAP,MAAO,mBAAiB;EAC5B,YACU,IACA,UAAoB;AADpB,SAAA,KAAA;AACA,SAAA,WAAA;EACP;EAEG,SAAM;;AACV,aAAO,MAAM,KAAK,GAAG,WAAW,QAAO;IACzC;;EAEM,QAAK;;AACT,aAAO,MAAM,KAAK,GAAG,WAAW,MAAK;IACvC;;EAEM,KAAK,QAAgB,OAAa;;AACtC,aAAO,MAAM,KAAK,GAAG,WAAW,QAAO,EAAG,OAAO,MAAM,EAAE,MAAM,KAAK,EAAE,QAAO;IAC/E;;EAEM,qBAAqB,eAA8B,QAAgB,OAAa;;AACpF,aAAO,MAAM,KAAK,GAAG,WAClB,QAAO,EACP,OAAO,CAAC,MAAM,EAAE,iBAAiB,aAAa,EAC9C,OAAO,MAAM,EACb,MAAM,KAAK,EACX,QAAO;IACZ;;EAEM,OAAO,OAAe,QAAgB,IAAE;;AAC5C,cAAQ,MAAM,YAAW;AACzB,aAAO,MAAM,KAAK,GAAG,WAClB,OACC,CAAC,MACC,EAAE,eAAe,YAAW,EAAG,SAAS,KAAK,KAC7C,CAAC,CAAC,EAAE,eAAe,KAAK,CAAC,OAAO,GAAG,YAAW,EAAG,SAAS,KAAK,CAAC,CAAC,EAEpE,MAAM,KAAK,EACX,QAAO;IACZ;;EAEM,IAAI,SAAiB;;AACzB,YAAM,KAAK,GAAG,WAAW,IAAI,OAAO;AACpC,WAAK,SAAS,KAAK,qBAAqB,IAAI,IAAI,qBAAqB,OAAO,CAAC;IAC/E;;EAEM,OAAO,SAAiB;;AAC5B,UAAI,QAAQ,OAAO,QAAW;AAC5B,cAAM;MACR;AACA,YAAM,KAAK,GAAG,WAAW,IAAI,OAAO;AACpC,WAAK,SAAS,KAAK,uBAAuB,IAAI,IAAI,uBAAuB,OAAO,CAAC;IACnF;;EAEM,OAAO,SAAiB;;AAC5B,UAAI,QAAQ,OAAO,QAAW;AAC5B,cAAM;MACR;AACA,YAAM,KAAK,GAAG,WAAW,OAAO,QAAQ,EAAE;IAC5C;;EAEM,YAAS;;AACb,YAAM,KAAK,GAAG,WAAW,MAAK;IAChC;;EAEM,OAAO,YAAsB;;AACjC,YAAM,KAAK,GAAG,WAAW,QAAQ,UAAU;AAC3C,WAAK,SAAS,KAAK,wBAAwB,IAAI,IAAI,wBAAuB,CAAE;IAC9E;;;;uCAlEW,oBAAiB,mBAAA,YAAA,GAAA,mBAAA,UAAA,CAAA;IAAA;EAAA;;4EAAjB,oBAAiB,SAAjB,mBAAiB,WAAA,YAFhB,OAAM,CAAA;EAAA;;",
  "names": []
}
