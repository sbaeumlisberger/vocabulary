{
  "version": 3,
  "sources": ["src/app/components/settings/settings/settings.component.ts", "src/app/components/settings/settings/settings.component.html", "src/app/components/settings/settings-tab.routes.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\nimport {\n  AlertController,\n  ViewWillEnter,\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonContent,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonSelect,\n  IonSelectOption,\n  IonToggle,\n  IonText,\n  IonDatetime,\n  IonSpinner,\n} from '@ionic/angular/standalone';\nimport { Theme } from 'src/app/models/theme.model';\nimport { Vocable } from 'src/app/models/vocable.model';\nimport { ReminderService } from 'src/app/services/reminder.service';\nimport { SettingsService } from 'src/app/services/settings.service';\nimport { ThemeService } from 'src/app/services/theme.service';\nimport { UpdateService } from 'src/app/services/update.service';\nimport { VocabularyService } from 'src/app/services/vocabulary.service';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'vt-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n  standalone: true,\n  imports: [\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonList,\n    IonItem,\n    IonLabel,\n    IonSelect,\n    FormsModule,\n    IonSelectOption,\n    IonToggle,\n    IonText,\n    IonDatetime,\n    IonSpinner,\n  ],\n})\nexport class SettingsComponent implements OnInit, ViewWillEnter {\n  reminderEnabled: boolean = false;\n\n  showPracticeLevelInVocabularyList: boolean = false;\n\n  reminderTime: string;\n\n  showReminderTimePicker: boolean = false;\n\n  checkingForUpdate: boolean = false;\n\n  get themes() {\n    return Object.values(Theme);\n  }\n\n  get selectedTheme(): Theme {\n    return this.themeService.getTheme();\n  }\n\n  set selectedTheme(theme: Theme) {\n    this.themeService.changeTheme(theme);\n    this.themeService.overwriteStatusBarColor('#f2f2f7');\n  }\n\n  constructor(\n    private readonly vocabularyService: VocabularyService,\n    private readonly themeService: ThemeService,\n    private readonly alertController: AlertController,\n    private readonly reminderService: ReminderService,\n    private readonly updateService: UpdateService,\n    private readonly settingsService: SettingsService,\n  ) {}\n\n  ngOnInit(): void {\n    this.showPracticeLevelInVocabularyList = this.settingsService.getShowPracticeLevelInVocabularyList();\n    this.reminderEnabled = this.reminderService.isReminderEnabled();\n    const reminderTime = this.reminderService.getReminderTime();\n    this.reminderTime =\n      reminderTime.hours.toString().padStart(2, '0') + ':' + reminderTime.minutes.toString().padStart(2, '0');\n  }\n\n  ionViewWillEnter(): void {\n    this.themeService.overwriteStatusBarColor('#f2f2f7');\n  }\n\n  async import(event: Event) {\n    const files = (event.target as HTMLInputElement).files;\n    if (files.length == 1) {\n      try {\n        const vocabulary: Vocable[] = JSON.parse(await files.item(0)!.text());\n        this.vocabularyService.deleteAll();\n        this.vocabularyService.import(vocabulary);\n        const alert = await this.alertController.create({\n          header: 'Import completed',\n          message: 'Vocabulary was successfully imported.',\n          buttons: ['OK'],\n        });\n        alert.present();\n      } catch (err) {\n        const alert = await this.alertController.create({\n          header: 'Import failed',\n          message: 'Could not import vocabulary. ' + err,\n          buttons: ['OK'],\n        });\n        alert.present();\n      }\n    }\n  }\n\n  async export() {\n    // get all vocabulary\n    const vocabulary = await this.vocabularyService.getAll();\n\n    // creatre json file\n    const blob = new Blob([JSON.stringify(vocabulary)], {\n      type: 'application/json',\n    });\n\n    // create download link\n    const a = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    a.href = url;\n    a.download = 'vocabulary.json';\n\n    // start the download\n    a.click();\n  }\n\n  onShowPracticeLevelInVocabularyListChanged() {\n    this.settingsService.setShowPracticeLevelInVocabularyList(this.showPracticeLevelInVocabularyList);\n  }\n\n  async onReminderEnabledChanged() {\n    if (this.reminderEnabled) {\n      if (window.Notification) {\n        await Notification.requestPermission();\n        const reminderTimeParts = this.reminderTime.split(':');\n        const hours = Number.parseInt(reminderTimeParts[0]);\n        const minutes = Number.parseInt(reminderTimeParts[1]);\n        this.reminderService.enableReminder({ hours, minutes });\n      } else {\n        const alert = await this.alertController.create({\n          header: 'Not supported',\n          message: 'Unfortunately, this function is not supported by your device.',\n          buttons: ['OK'],\n        });\n        alert.present();\n        this.reminderEnabled = false;\n      }\n    } else {\n      this.reminderService.disableReminder();\n    }\n  }\n\n  onReminderTimeChanged() {\n    const reminderTimeParts = this.reminderTime.split(':');\n    const hours = Number.parseInt(reminderTimeParts[0]);\n    const minutes = Number.parseInt(reminderTimeParts[1]);\n    this.reminderService.scheduleReminder({ hours, minutes });\n  }\n\n  toggleReminderTimePicker() {\n    this.showReminderTimePicker = !this.showReminderTimePicker;\n  }\n\n  async checkForUpdate() {\n    this.checkingForUpdate = true;\n    const updateFound = await this.updateService.checkForUpdate();\n    this.checkingForUpdate = false;\n    if (!updateFound) {\n      const alert = await this.alertController.create({\n        header: 'No update found',\n        buttons: ['OK'],\n      });\n      alert.present();\n    }\n  }\n}\n", "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>Settings</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n  <ion-header collapse=\"condense\">\n    <ion-toolbar>\n      <ion-title size=\"large\">Settings</ion-title>\n    </ion-toolbar>\n  </ion-header>\n\n  <div class=\"voc-content\">\n    <ion-list inset=\"true\" lines=\"none\">\n      <ion-item button=\"true\">\n        <ion-label>Import</ion-label>\n        <input type=\"file\" accept=\".json\" id=\"import\" (change)=\"import($event)\" />\n      </ion-item>\n      <ion-item button=\"true\" (click)=\"export()\">\n        <ion-label>Export</ion-label>\n      </ion-item>\n    </ion-list>\n\n    <ion-list inset=\"true\" lines=\"none\">\n      <ion-item>\n        <ion-select label=\"Theme\" interface=\"popover\" [(ngModel)]=\"selectedTheme\">\n          @for (theme of themes; track theme) {\n            <ion-select-option [value]=\"theme\">\n              {{ theme }}\n            </ion-select-option>\n          }\n        </ion-select>\n      </ion-item>\n    </ion-list>\n\n    <ion-list inset=\"true\" lines=\"none\">\n      <ion-item>\n        <ion-toggle\n          [(ngModel)]=\"showPracticeLevelInVocabularyList\"\n          (ngModelChange)=\"onShowPracticeLevelInVocabularyListChanged()\">\n          Show practice level in list\n        </ion-toggle>\n      </ion-item>\n    </ion-list>\n\n    <ion-list inset=\"true\" lines=\"none\">\n      <ion-item>\n        <ion-toggle [(ngModel)]=\"reminderEnabled\" (ngModelChange)=\"onReminderEnabledChanged()\">\n          Daily reminder\n        </ion-toggle>\n      </ion-item>\n      @if (reminderEnabled) {\n        <ion-item button=\"true\" detail=\"false\" (click)=\"toggleReminderTimePicker()\">\n          <ion-label>Time</ion-label>\n          <ion-text style=\"padding-right: 4px\" color=\"{{ showReminderTimePicker ? 'primary' : 'dark' }}\"\n            >{{ reminderTime }}\n          </ion-text>\n        </ion-item>\n      }\n      @if (reminderEnabled && showReminderTimePicker) {\n        <ion-datetime\n          style=\"--background: medium\"\n          size=\"cover\"\n          presentation=\"time\"\n          hourCycle=\"h23\"\n          color=\"primary\"\n          [(ngModel)]=\"reminderTime\"\n          (ngModelChange)=\"onReminderTimeChanged()\">\n        </ion-datetime>\n      }\n    </ion-list>\n\n    <ion-list inset=\"true\" lines=\"none\">\n      <ion-item lines=\"none\" (click)=\"checkForUpdate()\">\n        <ion-label>Vocabulary - Version 1.0.0</ion-label>\n        @if (checkingForUpdate) {\n          <ion-spinner></ion-spinner>\n        }\n      </ion-item>\n      <ion-item lines=\"none\">\n        <ion-label>© Sebastian Bäumlisberger</ion-label>\n      </ion-item>\n    </ion-list>\n  </div>\n</ion-content>\n", "import { Routes } from '@angular/router';\nimport { SettingsComponent } from './settings/settings.component';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: SettingsComponent,\n  },\n];\n"],
  "mappings": "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",
  "names": []
}
