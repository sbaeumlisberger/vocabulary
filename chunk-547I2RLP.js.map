{"version":3,"sources":["node_modules/ngx-webstorage-service/fesm2020/ngx-webstorage-service.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule } from '@angular/core';\n\n/**\r\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\r\n * different default transcoder.\r\n */\nclass ProxyStorageService {\n  /**\r\n   * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\r\n   * read and writes are delegated to given storage service.\r\n   *\r\n   * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\r\n   * @param subject           Storage service which should handle to actual storage of data.\r\n   */\n  constructor(defaultTranscoder, subject) {\n    this.defaultTranscoder = defaultTranscoder;\n    this.subject = subject;\n  }\n  /**\r\n   * Checks whether an entry with the specified key exists in the storage.\r\n   *\r\n   * @param   key Identifier of the entry for which its presence in the storage is to be checked.\r\n   * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\r\n   */\n  has(key) {\n    return this.subject.has(key);\n  }\n  /*\r\n   * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\r\n   * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\r\n   * `undefined` will be returned.\r\n   *\r\n   * @param   key     Identifier of the entry whose value is to be retrieved.\r\n   * @param   decoder Decoder to use for converting the stored value to the desired return type.\r\n   * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\r\n   *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\r\n   */\n  get(key, decoder) {\n    return this.subject.get(key, decoder ?? this.defaultTranscoder);\n  }\n  /**\r\n   * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\r\n   * value into a format that can be stored by the storage service's underlying storage.\r\n   *\r\n   * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\r\n   * the value will be the same. It, however, does not necessarily return the same reference.\r\n   *\r\n   * @param key     Identifier of the entry which is to be created or updated.\r\n   * @param value   Value which is to be stored.\r\n   * @param encoder Encoder used to convert the given value into a format that can be used for storage.\r\n   */\n  set(key, value, encoder) {\n    this.subject.set(key, value, encoder ?? this.defaultTranscoder);\n  }\n  /**\r\n   * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\r\n   * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\r\n   *\r\n   * @param key Identifier of the entry which is to be removed.\r\n   */\n  remove(key) {\n    this.subject.remove(key);\n  }\n  /**\r\n   * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\r\n   * for key *x*.\r\n   */\n  clear() {\n    this.subject.clear();\n  }\n  /**\r\n   * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\r\n   * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\r\n   * the same data.\r\n   *\r\n   * The default transcoder will not be changed for the storage service on which this function is invoked.\r\n   *\r\n   * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\r\n   * @returns            A new storage service that uses the specified transcoder by default.\r\n   */\n  withDefaultTranscoder(transcoder) {\n    return new ProxyStorageService(transcoder, this.subject);\n  }\n}\n\n/**\r\n * Base implementation for storage services.\r\n */\nclass BaseStorageService {\n  /**\r\n   * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\r\n   *\r\n   * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\r\n   */\n  constructor(defaultTranscoder) {\n    this.defaultTranscoder = defaultTranscoder;\n  }\n  /**\r\n   * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\r\n   * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\r\n   * `undefined` will be returned.\r\n   *\r\n   * @param   key     Identifier of the entry whose value is to be retrieved.\r\n   * @param   decoder Decoder to use for converting the stored value to the desired return type.\r\n   * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\r\n   *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\r\n   */\n  get(key, decoder) {\n    const value = this.getItem(key);\n    return value !== undefined ? (decoder ?? this.defaultTranscoder).decode(value) : undefined;\n  }\n  /**\r\n   * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\r\n   * value into a format that can be stored by the storage service's underlying storage.\r\n   *\r\n   * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\r\n   * the value will be the same. It, however, does not necessarily return the same reference.\r\n   *\r\n   * @param key     Identifier of the entry which is to be created or updated.\r\n   * @param value   Value which is to be stored.\r\n   * @param encoder Encoder used to convert the given value into a format that can be used for storage.\r\n   */\n  set(key, value, encoder) {\n    this.setItem(key, (encoder ?? this.defaultTranscoder).encode(value));\n  }\n  /**\r\n   * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\r\n   * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\r\n   * the same data.\r\n   *\r\n   * The default transcoder will not be changed for the storage service on which this function is invoked.\r\n   *\r\n   * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\r\n   * @returns            A new storage service that uses the specified transcoder by default.\r\n   */\n  withDefaultTranscoder(transcoder) {\n    return new ProxyStorageService(transcoder, this);\n  }\n}\n\n/** Transcoder that encodes values as JSON strings. */\nclass JsonStorageTranscoder {\n  encode(value) {\n    return JSON.stringify(value);\n  }\n  decode(value) {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nclass StringStorageTranscoder {\n  encode(value) {\n    return value;\n  }\n  decode(value) {\n    return value;\n  }\n}\n/** Transcoder that encodes/decodes `boolean` values. */\nclass BooleanStorageTranscoder {\n  encode(value) {\n    return value.toString();\n  }\n  decode(value) {\n    if (value === 'true') {\n      return true;\n    }\n    if (value === 'false') {\n      return false;\n    }\n    return undefined;\n  }\n}\n/** Transcoder that encodes/decodes `number` values. */\nclass NumberStorageTranscoder {\n  encode(value) {\n    return value.toString();\n  }\n  decode(value) {\n    const parsedNumber = Number(value);\n    return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n  }\n}\n/** Transcoder that encodes/decodes `Date` values to ISO strings. */\nclass DateIsoStorageTranscoder {\n  encode(value) {\n    return value.toISOString();\n  }\n  decode(value) {\n    const timestamp = Date.parse(value);\n    return isNaN(timestamp) ? undefined : new Date(timestamp);\n  }\n}\n/** Transcoder that encodes/decodes `Date` values to epoch timestamps. */\nclass DateEpochStorageTranscoder {\n  encode(value) {\n    return value.valueOf().toString();\n  }\n  decode(value) {\n    const timestamp = parseInt(value, 10);\n    return isNaN(timestamp) ? undefined : new Date(timestamp);\n  }\n}\n/** A set of storage transcoders. */\nconst StorageTranscoders = {\n  /** Transcoder that encodes values as JSON strings. */\n  JSON: new JsonStorageTranscoder(),\n  /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n  STRING: new StringStorageTranscoder(),\n  /** Transcoder that encodes/decodes `boolean` values. */\n  BOOLEAN: new BooleanStorageTranscoder(),\n  /** Transcoder that encodes/decodes `number` values. */\n  NUMBER: new NumberStorageTranscoder(),\n  /** Transcoder that encodes/decodes `Date` values into ISO strings. */\n  DATE_ISO_STRING: new DateIsoStorageTranscoder(),\n  /** Transcoder that encodes/decodes `Date` values into epoch timestamps. */\n  DATE_EPOCH_TIME: new DateEpochStorageTranscoder()\n};\n\n/**\r\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\r\n * instance is active. After the application is terminated all data will be lost.\r\n */\nclass InMemoryStorageService extends BaseStorageService {\n  /**\r\n   * Creates a new `InMemoryStorageService` instance.\r\n   */\n  constructor() {\n    super(StorageTranscoders.JSON);\n    /** A map that serves as the underlying backing storage for this service. */\n    this.storage = new Map();\n  }\n  /**\r\n   * Checks whether an entry with the specified key exists in the storage.\r\n   *\r\n   * @param   key Identifier of the entry for which its presence in the storage is to be checked.\r\n   * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\r\n   */\n  has(key) {\n    return this.storage.has(key);\n  }\n  /**\r\n   * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\r\n   * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\r\n   *\r\n   * @param key Identifier of the entry which is to be removed.\r\n   */\n  remove(key) {\n    this.storage.delete(key);\n  }\n  /**\r\n   * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\r\n   * for key *x*.\r\n   */\n  clear() {\n    this.storage.clear();\n  }\n  /**\r\n   * Performs the actual retrieval of a value from storage.\r\n   *\r\n   * @param   key Identifier of the entry whose value is to be retrieved.\r\n   * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\r\n   */\n  getItem(key) {\n    if (!this.storage.has(key)) {\n      return undefined;\n    }\n    return this.storage.get(key);\n  }\n  /**\r\n   * Stores the provided value using specified key in the storage.\r\n   *\r\n   * @param key   Identifier of the entry for which the value is to be stored.\r\n   * @param value The value that is to be stored.\r\n   */\n  setItem(key, value) {\n    this.storage.set(key, value);\n  }\n}\n\n/**\r\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\r\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\r\n * `StorageService` interface.\r\n */\nclass WebStorageService extends BaseStorageService {\n  /**\r\n   * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\r\n   *\r\n   * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\r\n   */\n  constructor(storage) {\n    super(StorageTranscoders.JSON);\n    this.storage = storage;\n  }\n  /**\r\n   * Checks whether an entry with the specified key exists in the storage.\r\n   *\r\n   * @param   key Identifier of the entry for which its presence in the storage is to be checked.\r\n   * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\r\n   */\n  has(key) {\n    return this.storage.getItem(key) !== null;\n  }\n  /**\r\n   * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\r\n   * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\r\n   *\r\n   * @param key Identifier of the entry which is to be removed.\r\n   */\n  remove(key) {\n    this.storage.removeItem(key);\n  }\n  /**\r\n   * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\r\n   * for key *x*.\r\n   */\n  clear() {\n    this.storage.clear();\n  }\n  /**\r\n   * Performs the actual retrieval of a value from storage.\r\n   *\r\n   * @param   key Identifier of the entry whose value is to be retrieved.\r\n   * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\r\n   */\n  getItem(key) {\n    const value = this.storage.getItem(key);\n    return value !== null ? value : undefined;\n  }\n  /**\r\n   * Stores the provided value using specified key in the storage.\r\n   *\r\n   * @param key   Identifier of the entry for which the value is to be stored.\r\n   * @param value The value that is to be stored.\r\n   */\n  setItem(key, value) {\n    return this.storage.setItem(key, value);\n  }\n}\n/**\r\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\r\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\r\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\r\n *\r\n * @param   storage Storage object which is to be tested for availability.\r\n * @returns         `true` if the specified storage can be used, `false` if not.\r\n */\nfunction isStorageAvailable(storage) {\n  // Check if storage is available.\n  if (!storage) {\n    return false;\n  }\n  // Check if the storage can actually be accessed.\n  try {\n    const now = Date.now();\n    const testItemKey = `storage-test-entry-${now}`;\n    const testItemValue = `storage-test-value-${now}`;\n    storage.setItem(testItemKey, testItemValue);\n    const retrievedItemValue = storage.getItem(testItemKey);\n    storage.removeItem(testItemKey);\n    return retrievedItemValue === testItemValue;\n  } catch (error) {\n    return false;\n  }\n}\n/**\r\n * Checks whether session storage is available and functional. This might not be the case for older browsers. However even certain browsers\r\n * that do support the web storage API can, under some circumstances, have non functional storage objects. For example, Safari is known to\r\n * have `sessionStorage` throw exceptions in private mode.\r\n *\r\n * @returns `true` if session storage can be used, `false` if not.\r\n */\nfunction isSessionStorageAvailable() {\n  try {\n    if (typeof sessionStorage !== 'undefined') {\n      return isStorageAvailable(sessionStorage);\n    }\n  } catch {}\n  return false;\n}\n/**\r\n * Checks whether local storage is available and functional. This might not be the case for older browsers. However even certain browsers\r\n * that do support the web storage API can, under some circumstances, have non functional storage objects. For example, Safari is known to\r\n * have `localStorage` throw exceptions in private mode.\r\n *\r\n * @returns `true` if local storage can be used, `false` if not.\r\n */\nfunction isLocalStorageAvailable() {\n  try {\n    if (typeof localStorage !== 'undefined') {\n      return isStorageAvailable(localStorage);\n    }\n  } catch {}\n  return false;\n}\nfunction sessionStorageFactory() {\n  if (isSessionStorageAvailable()) {\n    return new WebStorageService(sessionStorage);\n  }\n  return new InMemoryStorageService();\n}\n/** Injection token for the session storage service. */\nconst SESSION_STORAGE = new InjectionToken('SESSION_STORAGE', {\n  providedIn: 'root',\n  factory: sessionStorageFactory\n});\nfunction localStorageFactory() {\n  if (isLocalStorageAvailable()) {\n    return new WebStorageService(localStorage);\n  }\n  return new InMemoryStorageService();\n}\n/** Injection token for the local storage service. */\nconst LOCAL_STORAGE = new InjectionToken('LOCAL_STORAGE', {\n  providedIn: 'root',\n  factory: localStorageFactory\n});\n\n/**\r\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\r\n * now 'self providing' in the root injector.\r\n */\nclass StorageServiceModule {}\nStorageServiceModule.ɵfac = function StorageServiceModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || StorageServiceModule)();\n};\nStorageServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StorageServiceModule\n});\nStorageServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StorageServiceModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseStorageService, BooleanStorageTranscoder, DateEpochStorageTranscoder, DateIsoStorageTranscoder, InMemoryStorageService, JsonStorageTranscoder, LOCAL_STORAGE, NumberStorageTranscoder, ProxyStorageService, SESSION_STORAGE, StorageServiceModule, StorageTranscoders, StringStorageTranscoder, WebStorageService, isLocalStorageAvailable, isSessionStorageAvailable, isStorageAvailable, localStorageFactory, sessionStorageFactory };\n"],"mappings":"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","names":[],"x_google_ignoreList":[0]}