{
  "version": 3,
  "sources": ["src/environments/environment.ts", "src/app/app-routes.ts", "src/app/app.component.ts", "src/app/app.component.html", "src/main.ts"],
  "sourcesContent": ["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n", "import { Routes } from '@angular/router';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./components/tabs/tabs-routes').then((m) => m.ROUTES),\n  },\n];\n", "import { Component, OnInit } from '@angular/core';\nimport { ReminderService } from './services/reminder.service';\nimport { ThemeService } from './services/theme.service';\nimport { UpdateService } from './services/update.service';\nimport { IonApp, IonRouterOutlet } from '@ionic/angular/standalone';\n\n@Component({\n  selector: 'vt-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n  standalone: true,\n  imports: [IonApp, IonRouterOutlet],\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    private reminderService: ReminderService,\n    themeService: ThemeService,\n    updateService: UpdateService,\n  ) {\n    themeService.initialize();\n    updateService.startCheckForUpdates();\n  }\n\n  ngOnInit() {\n    this.reminderService.initialize();\n  }\n}\n", "<ion-app>\n  <ion-router-outlet></ion-router-outlet>\n</ion-app>\n", "import { enableProdMode, importProvidersFrom } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { NgEventBus } from 'ng-event-bus';\nimport { provideRouter, RouteReuseStrategy } from '@angular/router';\nimport { IonicRouteStrategy, provideIonicAngular } from '@ionic/angular/standalone';\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { ROUTES } from './app/app-routes';\nimport { AppComponent } from './app/app.component';\n\nif (environment.production) {\n  enableProdMode();\n}\n\n// disable browser history to avoid conflicts with tab-based navigation (non-linear routing)\nwindow.history.pushState = window.history.replaceState;\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    importProvidersFrom(\n      ServiceWorkerModule.register('ngsw-worker.js', {\n        enabled: environment.production,\n        registrationStrategy: 'registerImmediately',\n      }),\n    ),\n    provideIonicAngular(),\n    provideRouter(ROUTES),\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n    NgEventBus,\n  ],\n}).catch((err) => console.log(err));\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,IAAM,cAAc;EACzB,YAAY;;;;ACHP,IAAM,SAAiB;EAC5B;IACE,MAAM;IACN,cAAc,MAAM,OAAO,2BAA+B,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM;;;;;ACQ9E,IAAO,eAAP,MAAO,cAAY;EACvB,YACU,iBACR,cACA,eAA4B;AAFpB,SAAA,kBAAA;AAIR,iBAAa,WAAU;AACvB,kBAAc,qBAAoB;EACpC;EAEA,WAAQ;AACN,SAAK,gBAAgB,WAAU;EACjC;;;uCAZW,eAAY,4BAAA,eAAA,GAAA,4BAAA,YAAA,GAAA,4BAAA,aAAA,CAAA;IAAA;EAAA;;yEAAZ,eAAY,WAAA,CAAA,CAAA,SAAA,CAAA,GAAA,YAAA,MAAA,UAAA,CAAA,6BAAA,GAAA,OAAA,GAAA,MAAA,GAAA,UAAA,SAAA,sBAAA,IAAA,KAAA;AAAA,UAAA,KAAA,GAAA;ACbzB,QAAA,yBAAA,GAAA,SAAA;AACE,QAAA,oBAAA,GAAA,mBAAA;AACF,QAAA,uBAAA;;sBDSY,QAAQ,eAAe,EAAA,CAAA;EAAA;;;6EAEtB,cAAY,EAAA,WAAA,gBAAA,UAAA,8BAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;AEHzB,IAAI,YAAY,YAAY;AAC1B,iBAAc;AAChB;AAGA,OAAO,QAAQ,YAAY,OAAO,QAAQ;AAE1C,qBAAqB,cAAc;EACjC,WAAW;IACT,oBACE,oBAAoB,SAAS,kBAAkB;MAC7C,SAAS,YAAY;MACrB,sBAAsB;KACvB,CAAC;IAEJ,oBAAmB;IACnB,cAAc,MAAM;IACpB,EAAE,SAAS,oBAAoB,UAAU,mBAAkB;IAC3D;;CAEH,EAAE,MAAM,CAAC,QAAQ,QAAQ,IAAI,GAAG,CAAC;",
  "names": []
}
