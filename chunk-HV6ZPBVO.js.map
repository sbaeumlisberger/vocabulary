{"version":3,"sources":["node_modules/@angular/service-worker/fesm2022/service-worker.mjs","src/app/services/reminder.service.ts","src/app/services/update.service.ts"],"sourcesContent":["/**\n * @license Angular v18.2.11\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, makeEnvironmentProviders, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge, from } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n  return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\nclass NgswCommChannel {\n  constructor(serviceWorker) {\n    this.serviceWorker = serviceWorker;\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n      const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n      const currentController = defer(() => of(serviceWorker.controller));\n      const controllerWithChanges = concat(currentController, controllerChanges);\n      this.worker = controllerWithChanges.pipe(filter(c => !!c));\n      this.registration = this.worker.pipe(switchMap(() => serviceWorker.getRegistration()));\n      const rawEvents = fromEvent(serviceWorker, 'message');\n      const rawEventPayload = rawEvents.pipe(map(event => event.data));\n      const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n      const events = eventsUnconnected.pipe(publish());\n      events.connect();\n      this.events = events;\n    }\n  }\n  postMessage(action, payload) {\n    return this.worker.pipe(take(1), tap(sw => {\n      sw.postMessage({\n        action,\n        ...payload\n      });\n    })).toPromise().then(() => undefined);\n  }\n  postMessageWithOperation(type, payload, operationNonce) {\n    const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n  }\n  generateNonce() {\n    return Math.round(Math.random() * 10000000);\n  }\n  eventsOfType(type) {\n    let filterFn;\n    if (typeof type === 'string') {\n      filterFn = event => event.type === type;\n    } else {\n      filterFn = event => type.includes(event.type);\n    }\n    return this.events.pipe(filter(filterFn));\n  }\n  nextEventOfType(type) {\n    return this.eventsOfType(type).pipe(take(1));\n  }\n  waitForOperationCompleted(nonce) {\n    return this.eventsOfType('OPERATION_COMPLETED').pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n      if (event.result !== undefined) {\n        return event.result;\n      }\n      throw new Error(event.error);\n    })).toPromise();\n  }\n  get isEnabled() {\n    return !!this.serviceWorker;\n  }\n}\n\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](ecosystem/service-workers/push-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\nclass SwPush {\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  constructor(sw) {\n    this.sw = sw;\n    this.pushManager = null;\n    this.subscriptionChanges = new Subject();\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.notificationClicks = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n    this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n    this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map(message => message.data));\n    this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n    const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n    this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n  /**\n   * Subscribes to Web Push Notifications,\n   * after requesting and receiving user permission.\n   *\n   * @param options An object containing the `serverPublicKey` string.\n   * @returns A Promise that resolves to the new subscription object.\n   */\n  requestSubscription(options) {\n    if (!this.sw.isEnabled || this.pushManager === null) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const pushOptions = {\n      userVisibleOnly: true\n    };\n    let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n    pushOptions.applicationServerKey = applicationServerKey;\n    return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1)).toPromise().then(sub => {\n      this.subscriptionChanges.next(sub);\n      return sub;\n    });\n  }\n  /**\n   * Unsubscribes from Service Worker push notifications.\n   *\n   * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n   *          active subscription or the unsubscribe operation fails.\n   */\n  unsubscribe() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const doUnsubscribe = sub => {\n      if (sub === null) {\n        throw new Error('Not subscribed to push notifications.');\n      }\n      return sub.unsubscribe().then(success => {\n        if (!success) {\n          throw new Error('Unsubscribe failed!');\n        }\n        this.subscriptionChanges.next(null);\n      });\n    };\n    return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n  }\n  decodeBase64(input) {\n    return atob(input);\n  }\n  static {\n    this.ɵfac = function SwPush_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwPush)(i0.ɵɵinject(NgswCommChannel));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SwPush,\n      factory: SwPush.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwPush, [{\n    type: Injectable\n  }], () => [{\n    type: NgswCommChannel\n  }], null);\n})();\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link ecosystem/service-workers/communications Service worker communication guide}\n *\n * @publicApi\n */\nclass SwUpdate {\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  constructor(sw) {\n    this.sw = sw;\n    if (!sw.isEnabled) {\n      this.versionUpdates = NEVER;\n      this.unrecoverable = NEVER;\n      return;\n    }\n    this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY', 'NO_NEW_VERSION_DETECTED']);\n    this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n  }\n  /**\n   * Checks for an update and waits until the new version is downloaded from the server and ready\n   * for activation.\n   *\n   * @returns a promise that\n   * - resolves to `true` if a new version was found and is ready to be activated.\n   * - resolves to `false` if no new version was found\n   * - rejects if any error occurs\n   */\n  checkForUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', {\n      nonce\n    }, nonce);\n  }\n  /**\n   * Updates the current client (i.e. browser tab) to the latest version that is ready for\n   * activation.\n   *\n   * In most cases, you should not use this method and instead should update a client by reloading\n   * the page.\n   *\n   * <div class=\"alert is-important\">\n   *\n   * Updating a client without reloading can easily result in a broken application due to a version\n   * mismatch between the application shell and other page resources,\n   * such as lazy-loaded chunks, whose filenames may change between\n   * versions.\n   *\n   * Only use this method, if you are certain it is safe for your specific use case.\n   *\n   * </div>\n   *\n   * @returns a promise that\n   *  - resolves to `true` if an update was activated successfully\n   *  - resolves to `false` if no update was available (for example, the client was already on the\n   *    latest version).\n   *  - rejects if any error occurs\n   */\n  activateUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', {\n      nonce\n    }, nonce);\n  }\n  static {\n    this.ɵfac = function SwUpdate_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwUpdate)(i0.ɵɵinject(NgswCommChannel));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SwUpdate,\n      factory: SwUpdate.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwUpdate, [{\n    type: Injectable\n  }], () => [{\n    type: NgswCommChannel\n  }], null);\n})();\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nconst SCRIPT = new InjectionToken(ngDevMode ? 'NGSW_REGISTER_SCRIPT' : '');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n  return () => {\n    if (!(isPlatformBrowser(platformId) && 'serviceWorker' in navigator && options.enabled !== false)) {\n      return;\n    }\n    const ngZone = injector.get(NgZone);\n    const appRef = injector.get(ApplicationRef);\n    // Set up the `controllerchange` event listener outside of\n    // the Angular zone to avoid unnecessary change detections,\n    // as this event has no impact on view updates.\n    ngZone.runOutsideAngular(() => {\n      // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n      // becomes active. This allows the SW to initialize itself even if there is no application\n      // traffic.\n      const sw = navigator.serviceWorker;\n      const onControllerChange = () => sw.controller?.postMessage({\n        action: 'INITIALIZE'\n      });\n      sw.addEventListener('controllerchange', onControllerChange);\n      appRef.onDestroy(() => {\n        sw.removeEventListener('controllerchange', onControllerChange);\n      });\n    });\n    let readyToRegister$;\n    if (typeof options.registrationStrategy === 'function') {\n      readyToRegister$ = options.registrationStrategy();\n    } else {\n      const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister$ = of(null);\n          break;\n        case 'registerWithDelay':\n          readyToRegister$ = delayWithTimeout(+args[0] || 0);\n          break;\n        case 'registerWhenStable':\n          const whenStable$ = from(injector.get(ApplicationRef).whenStable());\n          readyToRegister$ = !args[0] ? whenStable$ : merge(whenStable$, delayWithTimeout(+args[0]));\n          break;\n        default:\n          // Unknown strategy.\n          throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n      }\n    }\n    // Don't return anything to avoid blocking the application until the SW is registered.\n    // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n    // given that some registration strategies wait for the app to stabilize).\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n    ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, {\n      scope: options.scope\n    }).catch(err => console.error('Service worker registration failed with:', err))));\n  };\n}\nfunction delayWithTimeout(timeout) {\n  return of(null).pipe(delay(timeout));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n  return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker : undefined);\n}\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nclass SwRegistrationOptions {}\n/**\n * @publicApi\n *\n * Sets up providers to register the given Angular Service Worker script.\n *\n * If `enabled` is set to `false` in the given options, the module will behave as if service\n * workers are not supported by the browser, and the service worker will not be registered.\n *\n * Example usage:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideServiceWorker('ngsw-worker.js')\n *   ],\n * });\n * ```\n */\nfunction provideServiceWorker(script, options = {}) {\n  return makeEnvironmentProviders([SwPush, SwUpdate, {\n    provide: SCRIPT,\n    useValue: script\n  }, {\n    provide: SwRegistrationOptions,\n    useValue: options\n  }, {\n    provide: NgswCommChannel,\n    useFactory: ngswCommChannelFactory,\n    deps: [SwRegistrationOptions, PLATFORM_ID]\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: ngswAppInitializer,\n    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n    multi: true\n  }]);\n}\n\n/**\n * @publicApi\n */\nclass ServiceWorkerModule {\n  /**\n   * Register the given Angular Service Worker script.\n   *\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\n   * workers are not supported by the browser, and the service worker will not be registered.\n   */\n  static register(script, options = {}) {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [provideServiceWorker(script, options)]\n    };\n  }\n  static {\n    this.ɵfac = function ServiceWorkerModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ServiceWorkerModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ServiceWorkerModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [SwPush, SwUpdate]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServiceWorkerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [SwPush, SwUpdate]\n    }]\n  }], null, null);\n})();\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, provideServiceWorker };\n","import { Time } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LOCAL_STORAGE, StorageService } from 'ngx-webstorage-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReminderService {\n  private static readonly REMINDER_ENABLED_KEY = 'reminderEnabled';\n\n  private static readonly REMINDER_TIME_KEY = 'reminderTime';\n\n  private reminderTimeoutId?: number;\n\n  constructor(@Inject(LOCAL_STORAGE) private storageService: StorageService) {}\n\n  initialize() {\n    if (this.isReminderEnabled()) {\n      const time = this.getReminderTime();\n      this.scheduleReminder(time);\n    }\n  }\n\n  isReminderEnabled(): boolean {\n    return this.storageService.get(ReminderService.REMINDER_ENABLED_KEY) ?? false;\n  }\n\n  getReminderTime(): Time {\n    return this.storageService.get(ReminderService.REMINDER_TIME_KEY) ?? { hours: 17, minutes: 0 };\n  }\n\n  enableReminder(time: Time) {\n    this.storageService.set(ReminderService.REMINDER_ENABLED_KEY, true);\n    this.storageService.set(ReminderService.REMINDER_TIME_KEY, time);\n    this.scheduleReminder(time);\n  }\n\n  disableReminder() {\n    if (this.reminderTimeoutId) {\n      clearTimeout(this.reminderTimeoutId);\n    }\n    this.storageService.set(ReminderService.REMINDER_ENABLED_KEY, false);\n  }\n\n  async scheduleReminder(time: Time) {\n    this.storageService.set(ReminderService.REMINDER_TIME_KEY, time);\n\n    if (this.reminderTimeoutId) {\n      clearTimeout(this.reminderTimeoutId);\n    }\n\n    const reminderDate = new Date();\n    reminderDate.setHours(time.hours);\n    reminderDate.setMinutes(time.minutes);\n    reminderDate.setSeconds(0);\n    reminderDate.setMilliseconds(0);\n    let timeoutMilliseconds = reminderDate.getTime() - Date.now();\n\n    if (timeoutMilliseconds < 1000) {\n      timeoutMilliseconds += 1000 * 60 * 60 * 24;\n    }\n\n    console.log('Scheduled reminder in ' + timeoutMilliseconds + ' ms');\n\n    this.reminderTimeoutId = window.setTimeout(async () => {\n      const serviceWorker = await navigator.serviceWorker.getRegistration();\n      serviceWorker.showNotification('Time to pratice some vocabulary!', {\n        data: {\n          onActionClick: {\n            default: {\n              operation: 'navigateLastFocusedOrOpen',\n              url: 'practice',\n            },\n          },\n        },\n      });\n      this.scheduleReminder(time);\n    }, timeoutMilliseconds);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { interval } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UpdateService {\n  constructor(private swUpdate: SwUpdate) {}\n\n  startCheckForUpdates() {\n    // check if service worker is active\n    if (this.swUpdate.isEnabled) {\n      // check for update immediately\n      this.checkForUpdate();\n\n      // check for update every hour\n      interval(1000 * 60 * 60).subscribe(() => {\n        this.checkForUpdate();\n      });\n    }\n  }\n\n  async checkForUpdate(): Promise<boolean> {\n    console.log('check for update');\n\n    // check if service worker is active and a update is available\n    if (this.swUpdate.isEnabled && (await this.swUpdate.checkForUpdate())) {\n      console.log('activate update');\n\n      // activate found update\n      await this.swUpdate.activateUpdate();\n\n      // apply the update\n      document.location.reload();\n\n      return true;\n    }\n\n    console.log('no update found');\n    return false;\n  }\n}\n"],"mappings":"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","names":[],"x_google_ignoreList":[0]}