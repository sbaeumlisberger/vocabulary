{
  "version": 3,
  "sources": ["src/app/directives/long-press.directive.ts", "src/app/utils/array.util.ts", "src/app/services/practice.service.ts", "src/app/components/practice/flashcards/practice.component.ts", "src/app/components/practice/flashcards/practice.component.html", "src/app/components/practice/overview/pratice-overview-page.component.ts", "src/app/components/practice/overview/pratice-overview-page.component.html", "src/app/components/practice/practice-tab.routes.ts"],
  "sourcesContent": ["import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { fromEvent, merge, of, Subscription, timer } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Directive({\n  selector: '[vtLongPress]',\n  standalone: true,\n})\nexport class LongPressDirective implements OnDestroy {\n  threshold = 1000;\n\n  @Output()\n  vtLongPress = new EventEmitter();\n\n  private subscription: Subscription;\n\n  constructor(elementRef: ElementRef) {\n    const mousedown = fromEvent<MouseEvent>(elementRef.nativeElement, 'mousedown').pipe(\n      filter((event) => event.button == 0),\n      map(() => true),\n    );\n    const mouseup = fromEvent<MouseEvent>(window, 'mouseup').pipe(\n      filter((event) => event.button == 0),\n      map(() => false),\n    );\n    const touchstart = fromEvent(elementRef.nativeElement, 'touchstart').pipe(map(() => true));\n    const touchEnd = fromEvent(elementRef.nativeElement, 'touchend').pipe(map(() => false));\n    this.subscription = merge(mousedown, mouseup, touchstart, touchEnd)\n      .pipe(\n        switchMap((down) => (down ? timer(this.threshold) : of(null))),\n        filter((value) => value == 0),\n      )\n      .subscribe(() => this.vtLongPress.emit());\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n", "export class ArrayUtil {\n  public static randomizeOrder<T>(array: T[]) {\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      const j = Math.floor(Math.random() * array.length);\n      array[i] = array[j];\n      array[j] = value;\n    }\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { PracticeLevel } from '../models/practice-level.model';\nimport { IVocable } from '../models/vocable.model';\nimport { VocabularyDB } from '../persistence/vocabulary-db';\nimport { ArrayUtil } from '../utils/array.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PracticeService {\n  constructor(private db: VocabularyDB) {}\n\n  async getVocabularyToPractice(): Promise<IVocable[]> {\n    const _24hAgo = new Date().getTime() - 24 * 60 * 60 * 1000;\n    const vocabulary = await this.db.vocabulary\n      .orderBy('score')\n      .filter((v) => v.lastPracticed < _24hAgo)\n      .limit(10)\n      .toArray();\n    ArrayUtil.randomizeOrder(vocabulary);\n    return vocabulary;\n  }\n\n  async reportCorrect(vocable: IVocable) {\n    if (vocable.id === undefined) {\n      throw 'vocable does not exist in database';\n    }\n    vocable.practicedCount++;\n    vocable.correctCount++;\n    vocable.lastPracticed = new Date().getTime();\n    vocable.wasCorrect = true;\n    vocable.practiceLevel = this.calcPracticeLevel(vocable);\n    vocable.score = this.calcScore(vocable);\n    await this.db.vocabulary.put(vocable);\n  }\n\n  async reportWrong(vocable: IVocable) {\n    if (vocable.id === undefined) {\n      throw 'vocable does not exist in database';\n    }\n    vocable.practicedCount++;\n    vocable.lastPracticed = new Date().getTime();\n    vocable.wasCorrect = false;\n    vocable.practiceLevel = this.calcPracticeLevel(vocable);\n    vocable.score = this.calcScore(vocable);\n    await this.db.vocabulary.put(vocable);\n  }\n\n  private calcScore(vocable: IVocable): number {\n    let score = 0;\n    if (vocable.wasCorrect) {\n      score += 100;\n    }\n    if (vocable.practicedCount > 0) {\n      score += (vocable.correctCount / Math.max(vocable.practicedCount, 5)) * 200;\n    }\n    return score;\n  }\n\n  private calcPracticeLevel(vocable: IVocable): PracticeLevel {\n    const correntRate = vocable.correctCount / vocable.practicedCount;\n    if (vocable.practicedCount >= 10 && correntRate > 0.9) {\n      return PracticeLevel.Excellent;\n    }\n    if (vocable.practicedCount >= 5 && correntRate > 0.75) {\n      return PracticeLevel.Good;\n    }\n    if (vocable.practicedCount >= 2 && correntRate > 0.5) {\n      return PracticeLevel.Improving;\n    }\n    if (vocable.correctCount >= 1) {\n      return PracticeLevel.AtLeastOnceCorrect;\n    }\n    return PracticeLevel.NewOrNeverCorrect;\n  }\n}\n", "import { Component } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { Vocable } from 'src/app/models/vocable.model';\nimport { PracticeService } from 'src/app/services/practice.service';\nimport { DecimalPipe } from '@angular/common';\nimport { ThemeService } from 'src/app/services/theme.service';\nimport { addIcons } from 'ionicons';\nimport {\n  syncOutline,\n  thumbsDownOutline,\n  thumbsUpOutline,\n  arrowBackOutline,\n  reload,\n  volumeMediumOutline,\n} from 'ionicons/icons';\nimport { ViewWillEnter, ViewWillLeave } from '@ionic/angular';\nimport { LongPressDirective } from 'src/app/directives/long-press.directive';\nimport {\n  IonHeader,\n  IonCard,\n  IonCardContent,\n  IonGrid,\n  IonLabel,\n  IonCol,\n  IonRow,\n  IonBackButton,\n  IonButtons,\n  IonContent,\n  IonToolbar,\n  IonTitle,\n  IonIcon,\n  IonButton,\n} from '@ionic/angular/standalone';\nimport { SettingsService } from 'src/app/services/settings.service';\n\nenum PracticeMode {\n  RANDOM = 'random',\n  FOREIGN_TO_NATIVE = 'foreign-to-native',\n  NATIVE_TO_FOREIGN = 'native-to-foreign',\n}\n\n@Component({\n  selector: 'vt-practice',\n  templateUrl: './practice.component.html',\n  styleUrls: ['./practice.component.scss'],\n  standalone: true,\n  imports: [\n    IonButton,\n    IonIcon,\n    IonTitle,\n    IonToolbar,\n    IonContent,\n    IonButtons,\n    IonBackButton,\n    IonRow,\n    IonCol,\n    IonLabel,\n    IonGrid,\n    IonCardContent,\n    IonCard,\n    IonHeader,\n    LongPressDirective,\n    DecimalPipe,\n    RouterLink,\n  ],\n})\nexport class PracticeComponent implements ViewWillEnter, ViewWillLeave {\n  flashcardFrontText: string = '';\n\n  flashcardBackText: string = '';\n\n  rotated: boolean = false;\n\n  finished: boolean = false;\n\n  results: (boolean | undefined)[] = [];\n\n  correctPercentage: number = 0;\n\n  autoSpeak = false;\n\n  private vocables: Vocable[] = [];\n\n  private currentVocable?: Vocable;\n\n  private index: number = -1;\n\n  private mode: PracticeMode;\n\n  private foreignLanguage = this.settingsService.getForeignLanguage();\n  private nativeLanguage = this.settingsService.getNativeLanguage();\n\n  private flashcardFrontLanguage = this.nativeLanguage;\n  private flashcardBackLanguage = this.foreignLanguage;\n\n  private knownAbbreviations = [\n    { abbreviation: 'sth.', word: 'something' },\n    { abbreviation: 'etw.', word: 'etwas' },\n    { abbreviation: 'sb.', word: 'somebody' },\n    { abbreviation: 'jdn.', word: 'jemanden' },\n  ];\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly practiceService: PracticeService,\n    private readonly settingsService: SettingsService,\n    private readonly themeService: ThemeService,\n  ) {\n    addIcons({\n      syncOutline,\n      thumbsDownOutline,\n      thumbsUpOutline,\n      arrowBackOutline,\n      reload,\n      volumeMediumOutline,\n    });\n\n    this.route.params.pipe(takeUntilDestroyed()).subscribe(async (params) => {\n      if (params.mode !== this.mode) {\n        this.mode = params.mode;\n        await this.loadVocabularyToPractice();\n      }\n    });\n  }\n\n  ionViewWillEnter(): void {\n    this.themeService.overwriteStatusBarColor('#f2f2f7');\n    this.foreignLanguage = this.settingsService.getForeignLanguage();\n    this.nativeLanguage = this.settingsService.getNativeLanguage();\n  }\n\n  ionViewWillLeave() {\n    speechSynthesis.cancel();\n  }\n\n  rotateCard() {\n    this.rotated = true;\n\n    if (this.autoSpeak && this.flashcardBackLanguage == this.foreignLanguage) {\n      this.speak();\n    }\n  }\n\n  speak() {\n    let text = this.rotated ? this.flashcardBackText : this.flashcardFrontText;\n    this.knownAbbreviations.forEach((entry) => (text = text.replaceAll(entry.abbreviation, entry.word)));\n    const language = this.rotated ? this.flashcardBackLanguage : this.flashcardFrontLanguage;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = language;\n    speechSynthesis.cancel();\n    speechSynthesis.speak(utterance);\n  }\n\n  toggleAutoSpeak() {\n    this.autoSpeak = !this.autoSpeak;\n  }\n\n  async markAsCorrect() {\n    await this.practiceService.reportCorrect(this.currentVocable!);\n    this.results[this.index] = true;\n    this.showNext();\n  }\n\n  async markAsWrong() {\n    await this.practiceService.reportWrong(this.currentVocable!);\n    this.results[this.index] = false;\n    this.showNext();\n  }\n\n  async continuePractice() {\n    await this.loadVocabularyToPractice();\n  }\n\n  private async loadVocabularyToPractice() {\n    this.vocables = await this.practiceService.getVocabularyToPractice();\n    if (this.vocables.length != 0) {\n      this.index = -1;\n      this.results = new Array(this.vocables.length);\n      this.finished = false;\n      this.showNext();\n    } else {\n      this.finished = true;\n    }\n  }\n\n  private showNext() {\n    if (this.index == this.vocables.length - 1) {\n      this.finished = true;\n      this.correctPercentage = (this.results.filter((result) => result === true).length / this.results.length) * 100;\n    } else {\n      this.index++;\n      this.currentVocable = this.vocables[this.index];\n      this.updateFlashcard();\n      this.rotated = false;\n      if (this.autoSpeak && this.flashcardFrontLanguage == this.foreignLanguage) {\n        this.speak();\n      }\n    }\n  }\n\n  private updateFlashcard() {\n    let mode = this.mode;\n    if (mode == PracticeMode.RANDOM) {\n      mode = Math.random() >= 0.5 ? PracticeMode.FOREIGN_TO_NATIVE : PracticeMode.NATIVE_TO_FOREIGN;\n    }\n    switch (mode) {\n      case PracticeMode.FOREIGN_TO_NATIVE:\n        this.flashcardFrontText = this.currentVocable.foreignMeaning;\n        this.flashcardBackText = this.currentVocable.nativeMeanings.join(', ');\n        this.flashcardFrontLanguage = this.foreignLanguage;\n        this.flashcardBackLanguage = this.nativeLanguage;\n        break;\n      case PracticeMode.NATIVE_TO_FOREIGN:\n        this.flashcardFrontText = this.currentVocable.nativeMeanings.join(', ');\n        this.flashcardBackText = this.currentVocable.foreignMeaning;\n        this.flashcardFrontLanguage = this.nativeLanguage;\n        this.flashcardBackLanguage = this.foreignLanguage;\n        break;\n    }\n  }\n}\n", "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>Practice</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/practice\"></ion-back-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n  <ion-header collapse=\"condense\">\n    <ion-toolbar>\n      <ion-title size=\"large\">Practice</ion-title>\n    </ion-toolbar>\n  </ion-header>\n\n  <div class=\"voc-content\">\n    @if (!finished) {\n      <div>\n        <ion-grid class=\"ion-padding\" style=\"max-width: 440px\">\n          <ion-row>\n            @for (result of results; track $index) {\n              <ion-col>\n                @switch (result) {\n                  @case (true) {\n                    <div class=\"progressDot\" style=\"background: #2dd36f\"></div>\n                  }\n                  @case (false) {\n                    <div class=\"progressDot\" style=\"background: #eb445a\"></div>\n                  }\n                  @default {\n                    <div class=\"progressDot\" style=\"background: #92949c\"></div>\n                  }\n                }\n              </ion-col>\n            }\n          </ion-row>\n        </ion-grid>\n\n        <div id=\"flashcard\" #flashcard (window:resize)=\"(0)\" [style]=\"{ height: flashcard.offsetWidth + 'px' }\">\n          <ion-card #flashcard style=\"height: 100%; margin-inline: 0px\">\n            <ion-card-content style=\"height: 100%\">\n              <ion-grid style=\"height: 100%\">\n                <ion-row style=\"height: 70%\" class=\"ion-align-items-center\">\n                  <ion-col class=\"ion-text-center\">\n                    <ion-label>{{ !rotated ? flashcardFrontText : flashcardBackText }}</ion-label>\n                  </ion-col>\n                </ion-row>\n                <ion-row class=\"ion-align-items-center\">\n                  <ion-col class=\"ion-text-center\">\n                    <ion-button\n                      fill=\"clear\"\n                      (click)=\"speak()\"\n                      (vtLongPress)=\"toggleAutoSpeak()\"\n                      [color]=\"autoSpeak ? 'primary' : 'dark'\">\n                      <ion-icon size=\"large\" name=\"volume-medium-outline\"> </ion-icon>\n                    </ion-button>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n            </ion-card-content>\n          </ion-card>\n        </div>\n        <br />\n        <ion-grid class=\"ion-padding\" style=\"max-width: 600px\">\n          @if (!rotated) {\n            <ion-row>\n              <ion-col class=\"ion-text-center\">\n                <ion-button fill=\"clear\" color=\"dark\" (click)=\"rotateCard()\">\n                  <ion-icon size=\"large\" name=\"sync-outline\"></ion-icon>\n                </ion-button>\n              </ion-col>\n            </ion-row>\n          } @else {\n            <ion-row>\n              <ion-col class=\"ion-text-center\">\n                <ion-button fill=\"clear\" color=\"dark\" (click)=\"markAsWrong()\">\n                  <ion-icon size=\"large\" name=\"thumbs-down-outline\"></ion-icon>\n                </ion-button>\n              </ion-col>\n              <ion-col class=\"ion-text-center\">\n                <ion-button fill=\"clear\" color=\"dark\" (click)=\"markAsCorrect()\">\n                  <ion-icon size=\"large\" name=\"thumbs-up-outline\"></ion-icon>\n                </ion-button>\n              </ion-col>\n            </ion-row>\n          }\n        </ion-grid>\n      </div>\n    } @else {\n      <div>\n        <h1 style=\"text-align: center; margin-top: 128px\">Finished!</h1>\n\n        <p style=\"width: 100%; text-align: center; margin-top: 128px\">\n          {{ correctPercentage | number: '1.0-0' }}% correct\n        </p>\n\n        <ion-button style=\"margin-top: 128px\" class=\"stretchedButton\" routerLink=\"/practice\">\n          <ion-icon slot=\"start\" name=\"arrow-back-outline\"></ion-icon>\n          <ion-label slot=\"end\">Back</ion-label>\n        </ion-button>\n        <ion-button style=\"margin-top: 16px\" class=\"stretchedButton\" (click)=\"continuePractice()\">\n          <ion-icon slot=\"start\" name=\"reload\"></ion-icon>\n          <ion-label slot=\"end\">Continue</ion-label>\n        </ion-button>\n      </div>\n    }\n  </div>\n</ion-content>\n", "import { Component } from '@angular/core';\nimport { ThemeService } from 'src/app/services/theme.service';\nimport {\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonContent,\n  IonCard,\n  IonCardHeader,\n  IonCardTitle,\n  IonCardContent,\n} from '@ionic/angular/standalone';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'vt-pratice-overview-page',\n  templateUrl: './pratice-overview-page.component.html',\n  styleUrls: ['./pratice-overview-page.component.scss'],\n  standalone: true,\n  imports: [\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonCard,\n    RouterLink,\n    IonCardHeader,\n    IonCardTitle,\n    IonCardContent,\n  ],\n})\nexport class PracticeOverviewPageComponent {\n  constructor(private themeService: ThemeService) {}\n\n  ionViewWillEnter() {\n    this.themeService.overwriteStatusBarColor('#f2f2f7');\n  }\n}\n", "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>Practice</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n  <ion-header collapse=\"condense\">\n    <ion-toolbar>\n      <ion-title size=\"large\">Practice</ion-title>\n    </ion-toolbar>\n  </ion-header>\n\n  <div class=\"voc-content\">\n    <ion-card [routerLink]=\"['flashcards', 'random']\" routerDirection=\"forward\">\n      <ion-card-header>\n        <ion-card-title>Random</ion-card-title>\n      </ion-card-header>\n      <ion-card-content>\n        It is randomly chosen whether a word must be translated from the foreign language to the native language or vice\n        versa.\n      </ion-card-content>\n    </ion-card>\n\n    <ion-card [routerLink]=\"['flashcards', 'foreign-to-native']\" routerDirection=\"forward\">\n      <ion-card-header>\n        <ion-card-title>Foreign to Native</ion-card-title>\n      </ion-card-header>\n      <ion-card-content>\n        All words must be translated from the foreign language into the native language.\n      </ion-card-content>\n    </ion-card>\n\n    <ion-card [routerLink]=\"['flashcards', 'native-to-foreign']\" routerDirection=\"forward\">\n      <ion-card-header>\n        <ion-card-title>Native to Foreign</ion-card-title>\n      </ion-card-header>\n      <ion-card-content>\n        All words must be translated from the native language into the foreign language.\n      </ion-card-content>\n    </ion-card>\n  </div>\n</ion-content>\n", "import { Routes } from '@angular/router';\nimport { PracticeComponent } from './flashcards/practice.component';\nimport { PracticeOverviewPageComponent } from './overview/pratice-overview-page.component';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: PracticeOverviewPageComponent,\n  },\n  {\n    path: 'flashcards/:mode',\n    component: PracticeComponent,\n  },\n];\n"],
  "mappings": "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",
  "names": ["PracticeMode", "_c0"]
}
